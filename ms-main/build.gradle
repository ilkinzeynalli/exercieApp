plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagement}"
	id 'checkstyle'

}

group = "${group}"
version = "${version}"

java {
	sourceCompatibility = "${javaSourceCompatibility}"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'


	/*Security*/
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
	implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6:${thymeleafExtrasSpringsecurityVersion}"
	implementation "org.springframework.security:spring-security-test"

	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config:3.1.3'
	implementation 'org.springframework.cloud:spring-cloud-vault-config-databases:3.1.3'

	/*Swagger*/
	implementation "io.springfox:springfox-boot-starter:${springfoxBootStarterVersion}"

	/*Lombok*/
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	/*Mapper*/
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	implementation "org.modelmapper:modelmapper:${modelmapperVersion}"

	/*Kafka*/
	implementation "org.springframework.kafka:spring-kafka"

	/*Liquibase*/
	implementation "org.liquibase:liquibase-core"

	runtimeOnly "mysql:mysql-connector-java:${mysqlConnectorJavaVersion}"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.kafka:spring-kafka-test"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
}

tasks.named('test') {
	useJUnitPlatform()
}


checkstyle {
	toolVersion = "${checkstyleVersion}"
	configFile = file("${rootProject.projectDir}/checkstyle/checkstyle.xml")
	ignoreFailures = false
}

tasks.withType(Checkstyle) {
	reports {
		xml.required = true
		html.required = true
	}
}
